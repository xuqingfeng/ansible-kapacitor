# The hostname of this node.
# Must be resolvable by any configured InfluxDB hosts.
hostname = "{{ kapacitor_hostname }}"
# Directory for storing a small amount of metadata about the server.
data_dir = "{{ kapacitor_data_dir }}"

[http]
  # HTTP API Server for Kapacitor
  # This server is always on,
  # it servers both as a write endpoint
  # and as the API endpoint for all other
  # Kapacitor calls.
  bind-address = "{{ kapacitor_http_bind_address }}"
  auth-enabled = {{ kapacitor_http_auth_enabled }}
  log-enabled = {{ kapacitor_http_log_enabled }}
  write-tracing = {{ kapacitor_http_write_tracing }}
  pprof-enabled = {{ kapacitor_http_pprof_enabled }}
  https-enabled = {{ kapacitor_http_https_enabled }}
  https-certificate = "{{ kapacitor_http_https_certificate }}"

[logging]
    # Destination for logs
    # Can be a path to a file or 'STDOUT', 'STDERR'.
    file = "{{ kapacitor_logging_file }}"
    # Logging level can be one of:
    # DEBUG, INFO, WARN, ERROR, or OFF
    level = "{{ kapacitor_logging_level }}"

[replay]
  # Where to store replay files, aka recordings.
  dir = "{{ kapacitor_replay_dir }}"

[task]
  # Where to store the tasks database
  # DEPRECATED: This option is not needed for new installations.
  # It is only used to determine the location of the task.db file
  # for migrating to the new `storage` service.
  dir = "{{ kapacitor_task_dir }}"
  # How often to snapshot running task state.
  snapshot-interval = "{{ kapacitor_task_snapshot_interval }}"

[storage]
  # Where to store the Kapacitor boltdb database
  boltdb = "{{ kapacitor_storage_boltdb }}"

[deadman]
  # Configure a deadman's switch
  # Globally configure deadman's switches on all tasks.
  # NOTE: for this to be of use you must also globally configure at least one alerting method.
  global = {{ kapacitor_deadman_global }}
  # Threshold, if globally configured the alert will be triggered if the throughput in points/interval is <= threshold.
  threshold = {{ kapacitor_deadman_threshold }}
  # Interval, if globally configured the frequency at which to check the throughput.
  interval = "{{ kapacitor_deadman_interval }}"
  # Id -- the alert Id, NODE_NAME will be replaced with the name of the node being monitored.
  id = "{{ kapacitor_deadman_id }}"
  # The message of the alert. INTERVAL will be replaced by the interval.
  message = "{{ kapacitor_deadman_message }}"


# Multiple InfluxDB configurations can be defined.
# Exactly one must be marked as the default.
# Each one will be given a name and can be referenced in batch queries and InfluxDBOut nodes.
[[influxdb]]
  # Connect to an InfluxDB cluster
  # Kapacitor can subscribe, query and write to this cluster.
  # Using InfluxDB is not required and can be disabled.
  enabled = {{ kapacitor_influxdb_enabled }}
  default = {{ kapacitor_influxdb_default }}
  name = "{{kapacitor_influxdb_name}}"
  #urls = ["http://localhost:8086"]
  {% if kapacitor_influxdb_urls is defined and kapacitor_influxdb_urls != None %}
  urls = ["{{ kapacitor_influxdb_urls | join('", "') }}"]
  {% endif %}
  username = "{{ kapacitor_influxdb_usernames }}"
  password = "{{ kapacitor_influxdb_password }}"
  timeout = {{ kapacitor_influxdb_timeout }}
  # Absolute path to pem encoded CA file.
  # A CA can be provided without a key/cert pair
  #   ssl-ca = "{{ kapacitor_influxdb_ssl_ca }}"
  # Absolutes paths to pem encoded key and cert files.
  #   ssl-cert = "{{ kapacitor_influxdb_ssl_cert }}"
  #   ssl-key = "{{ kapacitor_influxdb_ssl_key }}"

  # Do not verify the TLS/SSL certificate.
  # This is insecure.
  insecure-skip-verify = {{ kapacitor_influxdb_insecure_skip_veriify }}

  # Maximum time to try and connect to InfluxDB during startup
  startup-timeout = "{{ kapacitor_influxdb_startup_timeout }}"

  # Turn off all subscriptions
  disable-subscriptions = {{ kapacitor_influxdb_disable_subscriptions }}

  # Which protocol to use for subscriptions
  # one of 'udp', 'http', or 'https'.
  subscription-protocol = "{{ kapacitor_influxdb_subscription_protocol }}"

  # Subscriptions resync time interval
  # Useful if you want to subscribe to new created databases
  # without restart Kapacitord
  subscriptions-sync-interval = "{{ kapacitor_influxdb_subscriptions_sync_interval }}"

  # Override the global hostname option for this InfluxDB cluster.
  # Useful if the InfluxDB cluster is in a separate network and
  # needs special config to connect back to this Kapacitor instance.
  # Defaults to `hostname` if empty.
  kapacitor-hostname = "{{ kapacitor_influxdb_kapacitor_hostname }}"

  # Override the global http port option for this InfluxDB cluster.
  # Useful if the InfluxDB cluster is in a separate network and
  # needs special config to connect back to this Kapacitor instance.
  # Defaults to the port from `[http] bind-address` if 0.
  http-port = {{ kapacitor_influxdb_http_port }}

  # Host part of a bind address for UDP listeners.
  # For example if a UDP listener is using port 1234
  # and `udp-bind = "hostname_or_ip"`,
  # then the UDP port will be bound to `hostname_or_ip:1234`
  # The default empty value will bind to all addresses.
  udp-bind = "{{ kapacitor_influxdb_udp_bind }}"
  # Subscriptions use the UDP network protocl.
  # The following options of for the created UDP listeners for each subscription.
  # Number of packets to buffer when reading packets off the socket.
  udp-buffer = {{ kapacitor_influxdb_udp_buffer }}
  # The size in bytes of the OS read buffer for the UDP socket.
  # A value of 0 indicates use the OS default.
  udp-read-buffer = {{ kapacitor_influxdb_udp_read_buffer }}

  [influxdb.subscriptions]
    # Set of databases and retention policies to subscribe to.
    # If empty will subscribe to all, minus the list in
    # influxdb.excluded-subscriptions
    #
    # Format
    # db_name = <list of retention policies>
    #
    # Example:
    # my_database = [ "default", "longterm" ]
    #telegraf = ["default", "autogen"]
    {% if kapacitor_influxdb_subscriptions_dbs is defined and kapacitor_influxdb_subscriptions_dbs != None %}
    {% for db in kapacitor_influxdb_subscriptions_dbs %}
    {% if kapacitor_influxdb_subscriptions_retention_policies is defined and kapacitor_influxdb_subscriptions_retention_policies != None %}
    db = ["{{ kapacitor_influxdb_subscriptions_retention_policies | join('", "') }}"]
    {% endif %}
    {% endfor %}
    {% endif %}


  [influxdb.excluded-subscriptions]
    # Set of databases and retention policies to exclude from the subscriptions.
    # If influxdb.subscriptions is empty it will subscribe to all
    # except databases listed here.
    #
    # Format
    # db_name = <list of retention policies>
    #
    # Example:
    # my_database = [ "default", "longterm" ]
    {% if kapacitor_influxdb_excluded_subscriptions_dbs is defined and kapacitor_influxdb_excluded_subscriptions_dbs != None %}
    {% for db in kapacitor_influxdb_excluded_subscriptions_dbs %}
    {% if kapacitor_influxdb_excluded_subscriptions_retention_policies is defined and kapacitor_influxdb_excluded_subscriptions_retention_policies != None %}
    db = ["{{ kapacitor_influxdb_subscriptions_retention_policies | join('", "') }}"]
    {% endif %}
    {% endfor %}
    {% endif %}

[smtp]
  # Configure an SMTP email server
  # Will use TLS and authentication if possible
  # Only necessary for sending emails from alerts.
  enabled = {{ kapacitor_smtp_enabled }}
  host = "{{ kapacitor_smtp_host }}"
  port = {{ kapacitor_smtp_port }}
  username = "{{ kapacitor_smtp_username }}"
  password = "{{ kapacitor_smtp_password }}"
  # From address for outgoing mail
  from = "{{ kapacitor_smtp_from }}"
  # List of default To addresses.
  #to = ["to@example.com"]
  {% if kapacitor_smtp_to is defined and kapacitor_smtp_to != None %}
    to = ["{{ kapacitor_smtp_to | join('", "') }}"]
  {% endif %}

  # Skip TLS certificate verify when connecting to SMTP server
  no-verify = {{ kapacitor_smtp_no_verify }}
  # Close idle connections after timeout
  idle-timeout = "{{ kapacitor_smtp_idle_timeout }}"

  # If true the all alerts will be sent via Email
  # without explicitly marking them in the TICKscript.
  global = {{ kapacitor_smtp_global }}
  # Only applies if global is true.
  # Sets all alerts in state-changes-only mode,
  # meaning alerts will only be sent if the alert state changes.
  state-changes-only = {{ kapacitor_smtp_state_changes_only }}

[opsgenie]
    # Configure OpsGenie with your API key and default routing key.
    enabled = {{ kapacitor_opsgenie_enabled }}
    # Your OpsGenie API Key.
    api-key = "{{ kapacitor_opsgenie_api_key }}"
    # Default OpsGenie teams, can be overridden per alert.
    # teams = ["team1", "team2"]
    {% if kapacitor_opsgenie_teams is defined and kapacitor_opsgenie_teams != None %}
    teams = ["{{ kapacitor_opsgenie_teams | join('", "') }}"]
    {% endif %}
    # Default OpsGenie recipients, can be overridden per alert.
    # recipients = ["recipient1", "recipient2"]
    {% if kapacitor_opsgenie_recipients is defined and kapacitor_opsgenie_recipients != None %}
    recipients = ["{{ kapacitor_opsgenie_recipients | join('", "') }}"]
    {% endif %}
    # The OpsGenie API URL should not need to be changed.
    url = "{{ kapacitor_opsgenie_url }}"
    # The OpsGenie Recovery URL, you can change this
    # based on which behavior you want a recovery to
    # trigger (Add Notes, Close Alert, etc.)
    recovery_url = "{{ kapacitor_opsgenie_recovery_url }}"
    # If true then all alerts will be sent to OpsGenie
    # without explicitly marking them in the TICKscript.
    # The team and recipients can still be overridden.
    global = {{ kapacitor_opsgenie_global }}

[victorops]
  # Configure VictorOps with your API key and default routing key.
  enabled = {{ kapacitor_victorops_enabled }}
  # Your VictorOps API Key.
  api-key = "{{ kapacitor_victorops_api_key }}"
  # Default VictorOps routing key, can be overridden per alert.
  routing-key = "{{ kapacitor_victorops_routing_key }}"
  # The VictorOps API URL should not need to be changed.
  url = "{{ kapacitor_victorops_url }}"
  # If true the all alerts will be sent to VictorOps
  # without explicitly marking them in the TICKscript.
  # The routing key can still be overridden.
  global = {{ kapacitor_victorops_global }}

[pagerduty]
  # Configure PagerDuty.
  enabled = {{ kapacitor_pagerduty_enabled }}
  # Your PagerDuty Service Key.
  service-key = "{{ kapacitor_pagerduty_service_key }}"
  # The PagerDuty API URL should not need to be changed.
  url = "{{ kapacitor_pagerduty_url }}"
  # If true the all alerts will be sent to PagerDuty
  # without explicitly marking them in the TICKscript.
  global = {{ kapacitor_pagerduty_global }}

[slack]
  # Configure Slack.
  enabled = {{ kapacitor_slack_enabled }}
  # The Slack webhook URL, can be obtained by adding
  # an Incoming Webhook integration.
  # Visit https://slack.com/services/new/incoming-webhook
  # to add new webhook for Kapacitor.
  url = "{{ kapacitor_slack_url }}"
  # Default channel for messages
  channel = "{{ kapacitor_slack_channel }}"
  # If true all the alerts will be sent to Slack
  # without explicitly marking them in the TICKscript.
  global = {{ kapacitor_slack_global }}
  # Only applies if global is true.
  # Sets all alerts in state-changes-only mode,
  # meaning alerts will only be sent if the alert state changes.
  state-changes-only = {{ kapacitor_slack_state_changes_only }}

[telegram]
  # Configure Telegram.
  enabled = {{ kapacitor_telegram_enabled }}
  # The Telegram Bot URL should not need to be changed.
  url = "{{ kapacitor_telegram_url }}"
  # Telegram Bot Token, can be obtained From @BotFather.
  token = "{{ kapacitor_telegram_token }}"
  # Default recipient for messages, Contact @myidbot on Telegram to get an ID.
  chat-id = "{{ kapacitor_telegram_chat_id }}"
  # Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your alert message.
  #parse-mode  = "{{ kapacitor_telegram_parse_mode }}"
  # Disable link previews for links in this message
  disable-web-page-preview = {{ kapacitor_telegram_disable_web_page_preview }}
  # Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.
  disable-notification = {{ kapacitor_telegram_disable_notification }}
  # If true the all alerts will be sent to Telegram
  # without explicitly marking them in the TICKscript.
  global = {{ kapacitor_telegram_global }}
  # Only applies if global is true.
  # Sets all alerts in state-changes-only mode,
  # meaning alerts will only be sent if the alert state changes.
  state-changes-only = {{ kapacitor_telegram_state_changes_only }}

[hipchat]
  # Configure HipChat.
  enabled = {{ kapacitor_hipchat_enabled }}
  # The HipChat API URL. Replace subdomain with your
  # HipChat subdomain.
  url = "{{ kapacitor_hipchat_url }}"
  # Visit https://www.hipchat.com/docs/apiv2
  # for information on obtaining your room id and
  # authentication token.
  # Default room for messages
  room = "{{ kapacitor_hipchat_room }}"
  # Default authentication token
  token = "{{ kapacitor_hipchat_token }}"
  # If true then all alerts will be sent to HipChat
  # without explicitly marking them in the TICKscript.
  global = {{ kapacitor_hipchat_global }}
  # Only applies if global is true.
  # Sets all alerts in state-changes-only mode,
  # meaning alerts will only be sent if the alert state changes.
  state-changes-only = {{ kapacitor_hipchat_state_changes_only }}

[alerta]
  # Configure Alerta.
  enabled = {{ kapacitor_alerta_enabled }}
  # The Alerta URL.
  url = "{{ kapacitor_alerta_url }}"
  # Default authentication token.
  token = "{{ kapacitor_alerta_token }}"
  # Default environment.
  environment = "{{ kapacitor_alerta_environment }}"
  # Default origin.
  origin = "{{ kapacitor_alerta_origin }}"

[sensu]
  # Configure Sensu.
  enabled = {{ kapacitor_sensu_enabled }}
  # The Sensu Client host:port address.
  addr = "{{ kapacitor_sensu_addr }}"
  # Default JIT source.
  source = "{{ kapacitor_sensu_source }}"

[reporting]
  # Send usage statistics
  # every 12 hours to Enterprise.
  enabled = {{ kapacitor_reporting_enabled }}
  url = "{{ kapacitor_reporting_url }}"

[stats]
  # Emit internal statistics about Kapacitor.
  # To consume these stats create a stream task
  # that selects data from the configured database
  # and retention policy.
  #
  # Example:
  #  stream.from().database('_kapacitor').retentionPolicy('default')...
  #
  enabled = {{ kapacitor_stats_enabled }}
  stats-interval = "{{ kapacitor_stats_stats_interval }}"
  database = "{{ kapacitor_stats_database }}"
  retention-policy= "{{ kapacitor_stats_retention_policy }}"

[udf]
# Configuration for UDFs (User Defined Functions)
[udf.functions]
    # Example go UDF.
    # First compile example:
    #   go build -o avg_udf ./udf/agent/examples/moving_avg.go
    #
    # Use in TICKscript like:
    #   stream.goavg()
    #           .field('value')
    #           .size(10)
    #           .as('m_average')
    #
    # uncomment to enable
    #[udf.functions.goavg]
    #   prog = "./avg_udf"
    #   args = []
    #   timeout = "10s"

    # Example python UDF.
    # Use in TICKscript like:
    #   stream.pyavg()
    #           .field('value')
    #           .size(10)
    #           .as('m_average')
    #
    # uncomment to enable
    #[udf.functions.pyavg]
    #   prog = "/usr/bin/python2"
    #   args = ["-u", "./udf/agent/examples/moving_avg.py"]
    #   timeout = "10s"
    #   [udf.functions.pyavg.env]
    #       PYTHONPATH = "./udf/agent/py"

    # Example UDF over a socket
    #[udf.functions.myCustomUDF]
    #   socket = "/path/to/socket"
    #   timeout = "10s"

[talk]
  # Configure Talk.
  enabled = {{ kapacitor_talk_enabled }}
  # The Talk webhook URL.
  url = "{{ kapacitor_talk_url }}"
  # The default authorName.
  author_name = "{{ kapacitor_talk_author_name }}"

##################################
# Input Methods, same as InfluxDB
#

[collectd]
  enabled = {{ kapacitor_collectd_enabled }}
  bind-address = "{{ kapacitor_collectd_bind_address }}"
  database = "{{ kapacitor_collectd_database }}"
  retention-policy = "{{ kapacitor_collectd_retention_policy }}"
  batch-size = {{ kapacitor_collectd_batch_size }}
  batch-pending = {{ kapacitor_collectd_batch_pending }}
  batch-timeout = "{{ kapacitor_collectd_batch_timeout }}"
  typesdb = "{{ kapacitor_collectd_typesdb }}"

[opentsdb]
  enabled = {{ kapacitor_opentsdb_enabled }}
  bind-address = "{{ kapacitor_opentsdb_bind_address }}"
  database = "{{ kapacitor_opentsdb_database }}"
  retention-policy = "{{ kapacitor_opentsdb_retention_policy }}"
  consistency-level = "{{ kapacitor_opentsdb_consistency_level }}"
  tls-enabled = {{ kapacitor_opentsdb_tls_enabled }}
  certificate = "{{ kapacitor_opentsdb_certificate }}"
  batch-size = {{ kapacitor_opentsdb_batch_size }}
  batch-pending = {{ kapacitor_opentsdb_batch_pending }}
  batch-timeout = "{{ kapacitor_opentsdb_batch_timeout }}"
